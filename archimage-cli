#!/usr/bin/env bash

VERSION="4"

DIR="$( cd "$( dirname "$0" )" && pwd )"
ARCHIMAGE_REPO="https://raw.githubusercontent.com/ivan-hc/ArchImage/main"
DIVIDING_LINE="
-----------------------------------------------------------------------------
"

# Colors
Gold='\033[0;33m'
Green='\033[0;32m'
LightBlue='\033[1;34m'

# XDG Variables
SCRIPTDIR="${SCRIPTDIR:-$(xdg-user-dir DESKTOP 2>/dev/null)}"
[ -d "$SCRIPTDIR" ] || SCRIPTDIR="$PWD"

CACHEDIR="${XDG_CACHE_HOME:-$HOME/.cache}"
mkdir -p "$CACHEDIR"

# Common functions
_fit() {
	fold -sw 77 | sed 's/^/ /g'
}

# Makes "less" optional
less() {
	if ! command less "$@" 2>/dev/null; then
		while read -r line; do echo "$line"; done
		echo "Install 'less' if you want to scroll this list"
	fi
}

################################################################################
#				HELP
################################################################################

HELP_MESSAGE="
NAME: ${Green}ArchImage CLI\033[0m	VERSION: ${Green}$VERSION\033[0m

SYNOPSIS:	${LightBlue}archimage-cli {OPTION}\033[0m
		${LightBlue}archimage-cli {OPTION} {PROGRAM}\033[0m

DESCRIPTION: A command line interface to build AppImages based on JuNest, the lightweight Arch Linux based distro that runs, without root privileges, on top of any other Linux distro.

OPTIONS:

${Gold}-b,--build\033[0m\033[0m

	${LightBlue}archimage-cli -b {program}\033[0m

Description: Create the script to build the AppImage.

${Gold}-h,--help\033[0m

	${LightBlue}archimage-cli -h\033[0m

Description: Shows this message.

${Gold}-s,--sync\033[0m

	${LightBlue}archimage-cli -s\033[0m

Description: Update \"archimage-cli\" to the latest version.

${Gold}-v,--version\033[0m

	${LightBlue}archimage-cli -v\033[0m

Description: Shows the version.
$DIVIDING_LINE
SITE:

https://github.com/ivan-hc/ArchImage

\"Archimage\" is powered by \"JuNest\":

https://github.com/fsquillace/JuNest

"

_help() {
	printf "%b\n" "$HELP_MESSAGE" | _fit | sed "s/ --/--/g" | less -Ir
}

################################################################################
#				SYNC
################################################################################

_sync() {
	cd "$DIR" || exit 1
	echo -ne " ◆ Synchronizing Archimage CLI v$(./archimage-cli -v)...\r"; sleep 0.5
  	wget -q "$ARCHIMAGE_REPO/archimage-cli" -O "$CACHEDIR"/archimage-cli && chmod a+x "$CACHEDIR"/archimage-cli;
  	mv "$CACHEDIR"/archimage-cli ./archimage-cli; echo " ◆ ArchImage CLI is now updated to the version $(./archimage-cli -v) "
}

################################################################################
#				BUILD
################################################################################

# First step
GETTING_STARTED_MSG="-----------------------------------------------------------------------------

		${LightBlue}ARCHIMAGE SCRIPT CREATING WIZARD\033[0m, v$VERSION
$DIVIDING_LINE
After creating the script, make sure to run it in a dedicated directory. Do not run the script in directories that are already occupied!

You can re-run the same script at the end of the process in case the AppImage creation failed and the program does not work as you wanted, as long as everything happens always in the same dedicated directory.
$DIVIDING_LINE
Choose whether to build the AppImage using:

1. BubbleWrap (default), uses Linux namespaces for greater host compatibility
2. Proot (new), maximum portability, but still experimental
"
_get_started() {
	printf "%b\n" "$GETTING_STARTED_MSG" | _fit | sed "s/ --/--/g"
	read -r -ep "◆ Choose between BubbleWrap (1, default) and Proot (2): " choose
	if [ "$choose" = 2 ]; then
		TEMPLATE="sample-junest.sh"
	else
		TEMPLATE="sample-next-junest.sh"
	fi
}

# Name the executable in /usr/bin if different from the appname
_usr_bin_executable_name() {
	echo "$DIVIDING_LINE"
	read -r -ep "◆ NAME THE MAIN EXECUTABLE IN \$PATH, OR LEAVE BLANK IF IT IS THE SAME: " response
    	if [ -n "$response" ]; then
		mv ./"$APP"-junest.sh ./"$APP"-junest.sh.old
		sed -n '1,4p' ./"$APP"-junest.sh.old >> ./"$APP"-junest.sh
		echo "BIN=\"$response\"" >> ./"$APP"-junest.sh
		sed -n '6,20000000p' ./"$APP"-junest.sh.old >> ./"$APP"-junest.sh
		rm -f ./"$APP"-junest.sh.old
	fi
}

# Add optional dependencies
_add_dependences() {
	read -r -ep "◆ ADD (OPTIONAL) DEPENDENCES OR LEAVE BLANK: " RESPONSE
	if [ -n "$RESPONSE" ]; then
		mv ./"$APP"-junest.sh ./"$APP"-junest.sh.old
		sed -n '1,5p' ./"$APP"-junest.sh.old >> ./"$APP"-junest.sh
		echo "DEPENDENCES=\"$RESPONSE\"" >> ./"$APP"-junest.sh
		sed -n '7,20000000p' ./"$APP"-junest.sh.old >> ./"$APP"-junest.sh
		rm -f ./"$APP"-junest.sh.old
	fi
}

# Include all dependencies in the final AppImage
_include_all_dependences() {
	echo "◆ Automatic library checking should be more than enough. However..."
	read -r -ep "  DO YOU WANT TO INCLUDE ALL DEPENDENCES? THE PACKAGE MAY BE BLOATED (y,N) " yn
    	if echo "$yn" | grep -q "^y"; then
    		sed -i 's/#rsync -av/rsync -av/g' ./"$APP"-junest.sh
	fi
}

# Allow Nvidia check in the final AppImage
_enable_nvidia() {
	read -r -ep "◆ DO YOU WANT TO ENABLE HARDWARE ACCELERATION FOR NVIDIA USERS? (y,N) " yn
    	if echo "$yn" | grep -q "^y"; then
    		sed -i 's/NVIDIA_ON=0/NVIDIA_ON=1/g' ./"$APP"-junest.sh
	fi
}

# Start configuration
STANDARD_CONFIGURATION_MSG="◆ Choose to finish using a standard configuration with the bare minimum or continue by customizing the script as much as possible (default).
The standard configuration includes a package availability check in the Arch User Repository (if so, enable AUR and installs \"binutils\", \"gzip\" and \"basedevel\", all of them are only required to compile from and will not be included in the AppImage package), the AUR is enabled, installs \"ca-certificates\", includes keywords for the internet connections and audio trying to enable them.
The file \"/usr/lib/dri/swrast_dri.so\" will NOT be included if not needed.

Choose \"N\" or leave blank instead to continue customization (RECOMMENDED).
"

_enable_chaoticaur() {
	echo "$DIVIDING_LINE"
	read -r -ep "◆ DO YOU WANT TO ENABLE CHAOTIC-AUR (y,N)? " yn
    	if echo "$yn" | grep -q "^y"; then
		sed -i 's/###_enable_chaoticaur/_enable_chaoticaur/g' ./"$APP"-junest.sh
	fi
}

_enable_basicstuff() {
	read -r -ep "◆ DO YOU WANT TO INCLUDE BINUTILS AND GZIP (y,N)? " yn
    	if echo "$yn" | grep -q "^y"; then
		sed -i 's/#BASICSTUFF/BASICSTUFF/g' ./"$APP"-junest.sh
	fi
}

_enable_compilers(){
	read -r -ep "◆ DO YOU WANT TO INCLUDE THE BASE-DEVEL PACKAGE AND COMPILE FROM AUR (y,N)? " yn
    	if echo "$yn" | grep -q "^y"; then
		sed -i 's/#COMPILERS/COMPILERS/g' ./"$APP"-junest.sh
		sed -i '/-- gpg --keyserver/ s/^#*//' ./"$APP"-junest.sh
	fi
}

_keywords_to_save_in_usr_bin() {
	read -r -ep "◆ LIST BINARIES TO SAVE IN /usr/bin OR LEAVE BLANK $(echo -e '\n  DO NOT ADD ASTERISKS, THEY ARE ALREADY PROVIDED IN THE SCRIPT\n:') " savebins
	if [ -n "$savebins" ]; then
		sed -i 's/#_savebins/_savebins/g' ./"$APP"-junest.sh
		sed -i "s/SAVEBINSPLEASE/$savebins/g" ./"$APP"-junest.sh
	fi
}

_keywords_to_save_in_usr_share() {
	read -r -ep "◆ LIST DIRECTORIES TO SAVE IN /usr/share OR LEAVE BLANK $(echo -e '\n  DO NOT ADD ASTERISKS, THEY ARE ALREADY PROVIDED IN THE SCRIPT\n:') " saveshare
	if [ -n "$saveshare" ]; then
		sed -i 's/#_saveshare/_saveshare/g' ./"$APP"-junest.sh
		sed -i "s/SAVESHAREPLEASE/$saveshare/g" ./"$APP"-junest.sh
	fi
}

_keywords_to_save_in_usr_lib() {
	read -r -ep "◆ LIST LIBRARIES AND DIRECTORIES TO SAVE IN /usr/lib OR LEAVE BLANK $(echo -e '\n  DO NOT ADD ASTERISKS, THEY ARE ALREADY PROVIDED IN THE SCRIPT\n:') " savelibs
	if [ -n "$savelibs" ]; then
		sed -i 's/#_libkeywords/_libkeywords/g' ./"$APP"-junest.sh
		sed -i "s/SAVELIBSPLEASE/$savelibs/g" ./"$APP"-junest.sh
	fi
}

_include_swrast() {
	read -r -ep "◆ DO YOU WANT TO INCLUDE THE /usr/lib/dri/swrast_dri.so DRIVER (y,N)? " yn
    	if echo "$yn" | grep -q "^y"; then
		sed -i 's/#_include_swrast_dri/_include_swrast_dri/g' ./"$APP"-junest.sh
	fi
}

_include_audio_keywords() {
	read -r -ep "◆ DO YOU WISH TO ADD KEYWORDS IN /usr/lib TO ENABLE THE AUDIO (y,N)?" yn
	if echo "$yn" | grep -q "^y"; then
		sed -i 's/LIBSAVED="/LIBSAVED="alsa jack pipewire pulse /g' ./"$APP"-junest.sh
	fi
}

_include_internet_keywords() {
	read -r -ep "◆ I RECOMMEND TO USE CA-CERTIFICATES TRYING TO ENABLE THE INTERNET $(echo -e '\n  DO YOU WISH TO ADD IT INTO THE SCIPT (y,N)?') " yn
	if echo "$yn" | grep -q "^y"; then
		sed -i 's/DEPENDENCES="/DEPENDENCES="ca-certificates /g'  ./"$APP"-junest.sh
		sed -i 's/BINSAVED="/BINSAVED="certificates /g'  ./"$APP"-junest.sh
		sed -i 's/#_binlibs/_binlibs/g' ./"$APP"-junest.sh
		sed -i 's/SHARESAVED="/SHARESAVED="certificates /g'  ./"$APP"-junest.sh
		sed -i 's/#_saveshare/_saveshare/g' ./"$APP"-junest.sh
		sed -i 's/LIBSAVED="/LIBSAVED="pk p11 /g'  ./"$APP"-junest.sh
		sed -i 's/#_mvlibs/_mvlibs/g' ./"$APP"-junest.sh
		sed -i 's/#_liblibs/_liblibs/g' ./"$APP"-junest.sh
	fi
}

_select_libraries() {
	read -r -ep "◆ DO YOU WISH TO SELECT LIBRARIES TO SAVE (y,N)?" yn
	if echo "$yn" | grep -q "^y"; then
		sed -i 's/#_binlibs/_binlibs/g' ./"$APP"-junest.sh
		sed -i 's/#_liblibs/_liblibs/g' ./"$APP"-junest.sh
		sed -i 's/#_mvlibs/_mvlibs/g' ./"$APP"-junest.sh
		echo "$DIVIDING_LINE"
		_include_swrast
		echo "$DIVIDING_LINE"
		_keywords_to_save_in_usr_lib
		echo "$DIVIDING_LINE"
		_include_audio_keywords
		echo "$DIVIDING_LINE"
		_include_internet_keywords
	fi
}

################################################################################
#				USAGE
################################################################################

case "$1" in

	'')
		echo " ArchImage CLI requires an argument, run -h for more info.";;

	--help|-h)
		if [ -t 1 ]; then _help; else _help | sed -e 's/\x1b\[[0-9;]*m//g'; fi
		;;

	--build|-b)
		while [ -n "$1" ]; do
		cd "$SCRIPTDIR" || exit 1
		if [ -z "$2" ]; then
			echo " USAGE:	archimage-cli -b [PROGRAM]"
			exit 0
		else
			_get_started
			APP="$2"
			wget -q "$ARCHIMAGE_REPO/$TEMPLATE" -O "$APP"-junest.sh
			sed -i "s#APP=SAMPLE#APP=$APP#g" "$APP"-junest.sh
			_usr_bin_executable_name
			echo "$DIVIDING_LINE"
			_add_dependences
			echo "$DIVIDING_LINE"
			_include_all_dependences
			echo "$DIVIDING_LINE"
			_enable_nvidia
			echo "$DIVIDING_LINE"
			echo "$STANDARD_CONFIGURATION_MSG" | _fit | sed "s/^/ /g; s/  ◆/◆/g"
			read -r -ep "  DO YOU WISH TO USE A STANDARD CONFIGURATION (y,N)? " yn
    			if echo "$yn" | grep -q "^y"; then
				sed -i 's/#_binlibs/_binlibs/g' ./"$APP"-junest.sh # CHECK LIBRARIES RELATED TO BINARIES
				sed -i 's/#_liblibs/_liblibs/g' ./"$APP"-junest.sh # CHECK LIBRARIES RELATED TO OTHER LIBRARIES
				sed -i 's/#_mvlibs/_mvlibs/g' ./"$APP"-junest.sh # MV ALL LIBRARIES SAVED IN THE COMMANDS ABOVE AND BELOW
				sed -i 's/#_libkeywords/_libkeywords/g' ./"$APP"-junest.sh # CHECK LIBRARIES RELATED TO KEYWORD SAVED BELOW
				sed -i 's/LIBSAVED="/LIBSAVED="alsa jack pipewire pulse /g' ./"$APP"-junest.sh # SAVE KEYWORDS RELATED TO AUDIO
				sed -i 's/DEPENDENCES="/DEPENDENCES="ca-certificates /g'  ./"$APP"-junest.sh # INSTALL CA-CERTIFICATES
				sed -i 's/BINSAVED="/BINSAVED="certificates /g'  ./"$APP"-junest.sh # SAVE CA-CERTIFICATES IN /usr/bin
				sed -i 's/#_savebins/_savebins/g' ./"$APP"-junest.sh # SAVE KEYWORDS IN /usr/bin
				sed -i 's/#_binlibs/_binlibs/g' ./"$APP"-junest.sh # CHECK LIBRARIES RELATED TO BINARIES IN /usr/bin
				sed -i 's/SHARESAVED="/SHARESAVED="certificates /g'  ./"$APP"-junest.sh # SAVE CA-CERTIFICATES IN /usr/share
				sed -i 's/#_saveshare/_saveshare/g' ./"$APP"-junest.sh # SAVE KEYWORDS IN /usr/share
				sed -i 's/LIBSAVED="/LIBSAVED="pk p11 /g'  ./"$APP"-junest.sh # SAVE SOME KEYWORDS NEEDED FOR INTERNET
				if curl --output /dev/null --silent --fail -r 0-0 https://aur.archlinux.org/packages/"$APP" 2> /dev/null; then
					sed -i 's/#BASICSTUFF/BASICSTUFF/g' ./"$APP"-junest.sh # INSTALL BINUTILS AND GZIP
					sed -i 's/#COMPILERS/COMPILERS/g' ./"$APP"-junest.sh # INSTALL BASE-DEVEL
					sed -i '/-- gpg --keyserver/ s/^#*//' ./"$APP"-junest.sh # ENABLE AUR GPG VALIDATION
				fi
			else
				echo "$DIVIDING_LINE"
				_enable_chaoticaur
				echo "$DIVIDING_LINE"
				_enable_basicstuff
				echo "$DIVIDING_LINE"
				_enable_compilers
				echo "$DIVIDING_LINE"
				_keywords_to_save_in_usr_bin
				echo "$DIVIDING_LINE"
				_keywords_to_save_in_usr_share
				echo "$DIVIDING_LINE"
				_select_libraries
			fi
		fi
		echo "$DIVIDING_LINE"
		chmod a+x ./"$APP"-junest.sh
		echo " THE SCRIPT IS READY, RUN IT TO CREATE AN APPIMAGE!"
		echo ""
		printf "\nSUGGESTIONS:\n\n- from line titled 'REMOVE SOME BLOATWARES', add a list of items to be deleted to avoid an excess in the size of the final AppImage archive.\n\n" | _fit
		exit 0
		done
		;;

	--sync|-s) 
		_sync
  		;;

	--version|-v)
		echo "$VERSION"
		;;

  		*)
  		echo " Unknown option '$1', run -h for more info."
  		;;

esac
